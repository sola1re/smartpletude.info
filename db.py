#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es pour Smartpletude
Ce script initialise la base de donn√©es et peut cr√©er des utilisateurs de test
"""

import sys
from sqlalchemy import inspect
from app import app, db, User, bcrypt
import os
from dotenv import load_dotenv
from urllib.parse import quote_plus
import secrets


sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()  # Charge .env
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', secrets.token_hex(32))
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')


# Fix for potential encoding issues in DATABASE_URL
def get_safe_database_url():
    """R√©cup√®re l'URL de la base de donn√©es en g√©rant les probl√®mes d'encodage"""
    try:
        database_url = os.getenv("DATABASE_URL")
        if database_url:
            # Essayer de d√©coder et re-encoder proprement
            return database_url.encode('utf-8').decode('utf-8')
        return None
    except UnicodeDecodeError:
        print("‚ùå Erreur d'encodage dans DATABASE_URL")
        print("üí° Essayez de recr√©er votre fichier .env avec l'encodage UTF-8")
        return None

SQLALCHEMY_DATABASE_URI = get_safe_database_url()
SQLALCHEMY_TRACK_MODIFICATIONS = False

def test_database_connection():
    """Test la connexion √† la base de donn√©es"""
    print("Test de connexion √† la base de donn√©es...")
    
    if not SQLALCHEMY_DATABASE_URI:
        print("‚ùå DATABASE_URL non trouv√©e ou invalide")
        return False
    
    try:
        with app.app_context():
            # M√©thode alternative avec inspect
            inspector = inspect(db.engine)
            inspector.get_table_names()  # Ceci teste la connexion
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        print("\nüîß Solutions possibles:")
        print("1. V√©rifiez que PostgreSQL est d√©marr√©")
        print("2. V√©rifiez les param√®tres de connexion dans .env")
        print("3. V√©rifiez que la base de donn√©es 'smartpletude' existe")
        print("4. V√©rifiez l'encodage de votre fichier .env (UTF-8)")
        return False
    
    
def init_database():
    """Initialise la base de donn√©es"""
    print("Initialisation de la base de donn√©es...")

    if not test_database_connection():
        return False

    try:
        with app.app_context():
            db.drop_all()
            print("Tables existantes supprim√©es")

            db.create_all()
            print("Tables cr√©√©es avec succ√®s")

            tables = inspect(db.engine).get_table_names()
            print(f"Tables cr√©√©es: {', '.join(tables)}")
            return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False

def create_test_users():
    """Cr√©e des utilisateurs de test"""
    print("Cr√©ation des utilisateurs de test...")

    try:
        with app.app_context():
            prof_password = bcrypt.generate_password_hash('prof123').decode('utf-8')
            prof = User(
                email='prof@smartpletude.info',
                nom='Dupont',
                prenom='Marie',
                user_type='professeur',
                password_hash=prof_password
            )

            etudiant_password = bcrypt.generate_password_hash('etudiant123').decode('utf-8')
            etudiant = User(
                email='etudiant@smartpletude.info',
                nom='Martin',
                prenom='Pierre',
                user_type='etudiant',
                password_hash=etudiant_password
            )

            db.session.add_all([prof, etudiant])
            db.session.commit()
            print("‚úÖ Utilisateurs de test cr√©√©s avec succ√®s")
            print("   Professeur: prof@smartpletude.info / prof123")
            print("   √âtudiant: etudiant@smartpletude.info / etudiant123")
            return True
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation des utilisateurs: {e}")
        return False

def show_database_info():
    """Affiche les informations sur la base de donn√©es"""
    print("Informations sur la base de donn√©es:")

    if not test_database_connection():
        return

    try:
        with app.app_context():
            user_count = User.query.count()
            prof_count = User.query.filter_by(user_type='professeur').count()
            etudiant_count = User.query.filter_by(user_type='etudiant').count()

            print(f"   Total utilisateurs: {user_count}")
            print(f"   Professeurs: {prof_count}")
            print(f"   √âtudiants: {etudiant_count}")

            users = User.query.all()
            if users:
                print("Liste des utilisateurs:")
                for user in users:
                    print(f"   - {user.email} ({user.user_type}) - {user.prenom} {user.nom}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des informations: {e}")

def reset_database():
    """Remet √† z√©ro compl√®tement la base de donn√©es"""
    print("Remise √† z√©ro compl√®te de la base de donn√©es...")

    if init_database():
        create_test_users()
    else:
        print("‚ùå √âchec de la remise √† z√©ro")

def delete_user_by_email():
    """Supprime un utilisateur √† partir de son email"""
    print("\nüóëÔ∏è Suppression d'un utilisateur")
    
    if not test_database_connection():
        return
        
    email = input("Entrez l'email de l'utilisateur √† supprimer: ").strip()

    try:
        with app.app_context():
            user = User.query.filter_by(email=email).first()
            if user:
                confirm = input(f"Confirmer la suppression de {user.prenom} {user.nom} ({user.email}) ? (oui/non): ").lower()
                if confirm in ['oui', 'o', 'yes', 'y']:
                    db.session.delete(user)
                    db.session.commit()
                    print(f"‚úÖ Utilisateur {email} supprim√© avec succ√®s.")
                else:
                    print("‚ùå Suppression annul√©e.")
            else:
                print(f"‚ùå Aucun utilisateur trouv√© avec l'email: {email}")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erreur lors de la suppression: {e}")

def check_environment():
    """V√©rifie la configuration de l'environnement"""
    print("üîç V√©rification de l'environnement...")
    
    # V√©rifier le fichier .env
    env_file = ".env"
    if os.path.exists(env_file):
        print(f"‚úÖ Fichier {env_file} trouv√©")
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'DATABASE_URL' in content:
                    print("‚úÖ DATABASE_URL trouv√©e dans .env")
                else:
                    print("‚ùå DATABASE_URL non trouv√©e dans .env")
        except UnicodeDecodeError:
            print("‚ùå Probl√®me d'encodage dans le fichier .env")
            print("üí° Recr√©ez le fichier .env avec l'encodage UTF-8")
    else:
        print(f"‚ùå Fichier {env_file} non trouv√©")
    
    # V√©rifier les variables d'environnement
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        print("‚úÖ DATABASE_URL charg√©e")
        # Masquer le mot de passe pour l'affichage
        safe_url = database_url
        if '@' in safe_url:
            parts = safe_url.split('@')
            if ':' in parts[0]:
                user_pass = parts[0].split(':')
                if len(user_pass) >= 2:
                    safe_url = f"{user_pass[0]}:***@{parts[1]}"
        print(f"   URL: {safe_url}")
    else:
        print("‚ùå DATABASE_URL non charg√©e")

def main():
    """Fonction principale avec menu interactif"""
    print("=" * 50)
    print("SMARTPLETUDE - Gestionnaire de Base de Donn√©es")
    print("=" * 50)

    while True:
        print("\nQue souhaitez-vous faire?")
        print("1. Initialiser la base de donn√©es")
        print("2. Cr√©er des utilisateurs de test")
        print("3. Afficher les informations de la base")
        print("4. Remise √† z√©ro compl√®te")
        print("5. Quitter")
        print("6. Supprimer un utilisateur par email")
        print("7. V√©rifier l'environnement")
        print("8. Tester la connexion")

        choice = input("\nVotre choix (1-8): ").strip()

        if choice == '1':
            init_database()
        elif choice == '2':
            create_test_users()
        elif choice == '3':
            show_database_info()
        elif choice == '4':
            confirm = input("√ätes-vous s√ªr de vouloir tout supprimer ? (oui/non): ")
            if confirm.lower() in ['oui', 'o', 'yes', 'y']:
                reset_database()
            else:
                print("‚ùå Op√©ration annul√©e")
        elif choice == '5':
            print("üëã Au revoir.")
            break
        elif choice == '6':
            delete_user_by_email()
        elif choice == '7':
            check_environment()
        elif choice == '8':
            test_database_connection()
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")

if __name__ == '__main__':
    main()